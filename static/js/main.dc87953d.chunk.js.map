{"version":3,"sources":["img/svg/star.svg","img/svg/search.svg","img/svg/arrow.svg","img/svg/close.svg","img/svg/scrollTop.svg","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","require","App","Component","props","state","name","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,gTCOrCC,EAAQC,EAAQ,ICmBPC,GDjBmBC,Y,YCFhC,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,UAHQ,E,sEAOhB,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,0BAAMA,UAAU,+DAAhB,a,GAXQJ,cCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dc87953d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.705525b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.d5881169.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.12397182.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.cd090374.svg\";","module.exports = __webpack_public_path__ + \"static/media/scrollTop.2b8a59ae.svg\";","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport search from './img/svg/search.svg';\nimport arrow from './img/svg/arrow.svg';\nimport star from './img/svg/star.svg';\nimport close from './img/svg/close.svg';\nimport scrollTop from './img/svg/scrollTop.svg';\nconst axios = require('axios');\n\nexport default class Home extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            listLength: 2,\n            dataTimeout: null,\n            allMovie: false,\n            infoLength: 100,\n            castNameLength: 3,\n            pageLength: 1,\n            requestStatus: true,\n            scrollTop: false\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', () => {\n            var DOMScrollTop = document.documentElement.scrollTop;\n            var DOMScrollHeigth = document.documentElement.scrollHeight - document.documentElement.clientHeight;\n            var DOMScrollCalculate = DOMScrollTop / DOMScrollHeigth;\n\n            if (DOMScrollCalculate >= 0.8) {\n                if (this.state.requestStatus) {\n                    this.setState({ requestStatus: false });\n                    this.getData();\n                }\n            }\n\n            DOMScrollTop < 550 ? this.setState({ scrollTop: false }) : this.setState({ scrollTop: true });\n        }, true);\n    }\n\n    getData = () => {\n\n        let state = this;\n        let stateData = [];\n\n        axios.get('http://www.omdbapi.com/?apikey=a77b259b&s=' + this.state.value + '&page=' + this.state.pageLength)\n            .then(function (response) {\n                response.data.Search.map((item) =>\n                    axios.get('http://www.omdbapi.com/?apikey=a77b259b&i=' + item.imdbID)\n                        .then(function (response) {\n                            stateData.push(response.data);\n                            state.setState({ data: state.state.data.concat(response.data), requestStatus: true, pageLength: state.state.pageLength + 1 });\n                        })\n                        .catch(function (error) {\n                            console.log(error);\n                        })\n                );\n            })\n            .catch(function (error) {\n                console.log(error)\n            })\n    }\n\n    onKeyUp = (e) => {\n        this.setState({ data: [] })\n        this.state.dataTimeout && clearTimeout(this.state.dataTimeout);\n\n        this.setState({\n            value: e.target.value, dataTimeout:\n                setTimeout(() => {\n                    this.getData();\n                }, 1000)\n        });\n    }\n\n    clickFalse = (e) => {\n        e.preventDefault()\n    }\n\n    movieList = () => {\n        let searchBar = document.querySelector(\"input\");\n        this.setState({\n            allMovie: true\n        })\n        searchBar.value = `${this.state.value} için ${this.state.data.length} film bulundu`\n        searchBar.setAttribute(\"disabled\", \"\")\n    }\n\n    clearData = () => {\n        let searchBar = document.querySelector(\"input\");\n        this.setState({\n            data: [],\n            allMovie: false,\n            value: \"\"\n        })\n        searchBar.value = \"\"\n        searchBar.removeAttribute(\"disabled\")\n    }\n\n    scrollToTop = () => {\n        let scrollStep = -window.scrollY / (2000 / 100), scrollInterval = setInterval(function () {\n            if (window.scrollY !== 0) {\n                window.scrollBy(0, scrollStep);\n            } else {\n                clearInterval(scrollInterval);\n            }\n        }, 15);\n    }\n\n    render() {\n        return (\n            <div className=\"w-100 d-flex align-items-center flex-column\">\n                <div className={this.state.scrollTop ? \"scroll-top active\" : \"scroll-top\"} onClick={this.scrollToTop}><img src={scrollTop} alt=\"\" /></div>\n                <label id=\"search\" className=\"w-100 position-relative mb-4\">\n                    <div className=\"search-bar-icon\">\n                        {this.state.value ? this.state.allMovie ? <div className=\"close-icon\" onClick={this.clearData}><img alt=\"\" src={close} /></div> : <div className=\"arrow-icon\"><img alt=\"\" src={arrow} /></div> : <div className=\"search-icon\"><img alt=\"\" src={search} /></div>}\n                    </div>\n                    <input className={this.state.allMovie ? \"w-100 px-4 pl-2 pr-5 active\" : \"w-100 px-4 pl-2 pr-5\"} placeholder=\"Bulmak istediğiniz filmin adını yazınız\" onKeyUp={this.onKeyUp} type=\"text\" />\n                </label>\n                {\n                    this.state.allMovie ? <div className=\"container\">\n                        <div className=\"row\">\n                            {\n                                this.state.data.map((item, index) =>\n                                    <div className=\"col-6\" key={index}>\n                                        <li className=\"movie__item d-flex flex-column flex-sm-row\">\n                                            <figure className=\"mx-auto mb-3 mr-sm-3\"><img alt={item.Title} src={item.Poster} /></figure>\n                                            <article>\n                                                <h4>{`${item.Title} (${item.Year})`}</h4>\n                                                <div className=\"movie__rating\">\n                                                    <i><img alt=\"\" src={star} /></i>\n                                                    <span>{item.imdbRating}<small>/10</small></span>\n                                                </div>\n                                                <div className=\"movie__details\">\n                                                    <span>Dil: {item.Language}</span>\n                                                    <span className=\"movie__cast-name\">Oyuncular: {\n                                                        item.Actors.split(\",\").map((item, index) =>\n                                                            index < this.state.castNameLength ? item : null\n                                                        )\n                                                    } | <a href=\"/\" onClick={this.clickFalse}>Tüm listeyi gör »</a>\n                                                    </span>\n                                                </div>\n                                                <p className=\"info\">{item.Plot.substr(0, this.state.infoLength)} <a href=\"/\" onClick={this.clickFalse}>Detaylar »</a></p>\n                                            </article>\n                                        </li>\n                                    </div>\n                                )\n                            }\n                        </div>\n                    </div>\n                        : this.state.value ? <div className=\"container\">\n                            <div className=\"row\">\n                                <ul className=\"movie px-4 rounded mx-auto\">\n                                    {\n                                        this.state.data.map((item, index) =>\n                                            index < this.state.listLength && (\n                                                <div className=\"col-12\" key={index}>\n                                                    <li className=\"movie__item d-flex flex-column flex-sm-row\">\n                                                        <figure className=\"mx-auto mb-3 mr-sm-3\"><img alt={item.Title} src={item.Poster} /></figure>\n                                                        <article>\n                                                            <h4>{`${item.Title} (${item.Year})`}</h4>\n                                                            <div className=\"movie__rating\">\n                                                                <i><img alt=\"\" src={star} /></i>\n                                                                <span>{item.imdbRating}<small>/10</small></span>\n                                                            </div>\n                                                            <div className=\"movie__details\">\n                                                                <span>Dil: {item.Language}</span>\n                                                                <span className=\"movie__cast-name\">Oyuncular: {\n                                                                    item.Actors.split(\",\").map((item, index) =>\n                                                                        index < this.state.castNameLength ? item : null\n                                                                    )\n                                                                } | <a href=\"/\" onClick={this.clickFalse}>Tüm listeyi gör »</a>\n                                                                </span>\n                                                            </div>\n                                                            <p className=\"info\">{item.Plot.substr(0, this.state.infoLength)} <a href=\"/\" onClick={this.clickFalse}>Detaylar »</a></p>\n                                                        </article>\n                                                    </li>\n                                                </div>\n                                            )\n                                        )\n                                    }\n                                    <Link to=\"/\" className=\"more-movie w-100 text-center p-3 d-block\" onClick={this.movieList}>DAHA FAZLA SONUÇ »</Link>\n                                </ul>\n                            </div>\n                        </div> : null\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './app.scss';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Home from './Home';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      name: \"soydan\"\n    }\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <main className=\"d-flex justify-content-center align-items-center p-3 p-sm-5\">\n            asd\n          </main>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}